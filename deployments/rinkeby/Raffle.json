{
  "address": "0xB84184D332a5fe85FA94987a0D0Fb6B0AdB0C48c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8368e2af0bbb2eb48943600ecdcf11911369311000949fed8677cdb09d9673d1",
  "receipt": {
    "to": null,
    "from": "0x3DEa5291F69606423e8e41A46DeFe871BC309aee",
    "contractAddress": "0xB84184D332a5fe85FA94987a0D0Fb6B0AdB0C48c",
    "transactionIndex": 23,
    "gasUsed": "1302728",
    "logsBloom": "0x
    "blockHash": "0xd34619cc8703e0103d6a4fd034babcaff17ee5073e171fd3d00eeced712367f9",
    "transactionHash": "0x8368e2af0bbb2eb48943600ecdcf11911369311000949fed8677cdb09d9673d1",
    "logs": [],
    "blockNumber": 10852261,
    "cumulativeGasUsed": "4409597",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "6383",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "7bb6f26ae12f41b2812831b15ddd814d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"this is the function that the Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true The following should be true in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\n// Enter the lottery(paying some amount)\\n// pick a random winner (verifiably random)\\n// Winner to be selected every X minutes --> comletely automated\\n// Chainlink Oracle --> Randomness, Automated Execution (Chainlink Keeper)\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\nerror Raffle__NotEnoughEth();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type declaration */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    } // uint256 0 = OPEN, 1 = CALCULATING\\n\\n    /* State Variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 public s_lastTimeStamp;\\n    uint256 public immutable i_interval;\\n\\n    /* Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 updateInterval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        // i_vrfCoordinator is a contract\\n        // vrfCoordinatorV2 is the address of the contract\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        i_interval = updateInterval;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    /**\\n    @dev this is the function that the Chainlink Keeper nodes call\\n    they look for the `upkeepNeeded` to return true\\n    The following should be true in order to return true:\\n    1. Our time interval should have passed\\n    2. The lottery should have at least 1 player, and have some ETH\\n    3. Our subscription is funded with LINK\\n    4. The lottery should be in an \\\"open\\\" state\\n     */\\n    function checkUpkeep(\\n        // this function is perfomed off-chain\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool haveBalance = (address(this).balance != 0);\\n        bool havePlayer = (s_players.length != 0);\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        upkeepNeeded = (haveBalance && havePlayer && isOpen && timePassed);\\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\\n    }\\n\\n    // someone in the chainlink network will activate this function\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        if ((block.timestamp - s_lastTimeStamp) > i_interval) {\\n            s_lastTimeStamp = block.timestamp;\\n            s_raffleState = RaffleState.CALCULATING;\\n            uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n                i_gasLane, // gasLane or keyHash\\n                i_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callbackGasLimit,\\n                NUM_WORDS\\n            );\\n            emit RequestedRaffleWinner(requestId);\\n        }\\n        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function\\n    }\\n\\n    function enterRaffle() public payable {\\n        // require msg.value > i_entranceFee\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEth();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        // Emit an event when we update a dynamic array or mapping\\n        // Named events with the function name reversed\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    // external function saves gas compared to public function\\n    // function requestRandomWinner() external {\\n    //     // Request the random number\\n    //     // Once we get it, do something with it\\n    //     // chainlink VFT is a 2-transaction process\\n    //     s_raffleState = RaffleState.CALCULATING;\\n    //     uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n    //         i_gasLane, // gasLane or keyHash\\n    //         i_subscriptionId,\\n    //         REQUEST_CONFIRMATIONS,\\n    //         i_callbackGasLimit,\\n    //         NUM_WORDS\\n    //     );\\n    //     emit RequestedRaffleWinner(requestId);\\n    // }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success)\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* View / Pure functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    // this function is pure because we don't read NUM_WORDS from memory\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS; // equal to return 1;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getVrfCoordinator() public view returns (VRFCoordinatorV2Interface) {\\n        return i_vrfCoordinator;\\n    }\\n}\\n\",\"keccak256\":\"0x788af106912b931cb653535761b85a2a5005352a20c22bdddbf1111525af7a72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019fc380380620019fc8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550806101408181525050426002819055505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051611600620003fc600039600081816106d9015281816108d20152818161094b01526109a6015260006107c10152600061079e0152600061077d0152600081816103d401526107410152600081816103ac01526104d1015260008181610411015261046501526116006000f3fe6080604052600436106100f35760003560e01c8063473f1ddc1161008a5780636e04ff0d116100595780636e04ff0d146102d757806391ad27b414610315578063e55ae4e814610340578063fd6673f51461037d576100f3565b8063473f1ddc1461022b57806353a2c19a146102565780635f1b0fd8146102815780636919207d146102ac576100f3565b80632cfcc539116100c65780632cfcc539146101a2578063320229eb146101ac57806334854043146101d75780634585e33b14610202576100f3565b806309bc33a7146100f85780630cb4a29d14610123578063115cbaf51461014e5780631fe543e314610179575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d07565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610da1565b60405180910390f35b34801561015a57600080fd5b506101636103f8565b6040516101709190610e33565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190610fe7565b61040f565b005b6101aa6104cf565b005b3480156101b857600080fd5b506101c161063e565b6040516101ce9190610d07565b60405180910390f35b3480156101e357600080fd5b506101ec610648565b6040516101f99190610d07565b60405180910390f35b34801561020e57600080fd5b506102296004803603810190610224919061109e565b61064e565b005b34801561023757600080fd5b5061024061088a565b60405161024d919061110c565b60405180910390f35b34801561026257600080fd5b5061026b6108b4565b6040516102789190610d07565b60405180910390f35b34801561028d57600080fd5b506102966108c3565b6040516102a39190610d07565b60405180910390f35b3480156102b857600080fd5b506102c16108d0565b6040516102ce9190610d07565b60405180910390f35b3480156102e357600080fd5b506102fe60048036038101906102f991906111dc565b6108f4565b60405161030c9291906112c8565b60405180910390f35b34801561032157600080fd5b5061032a6109a2565b6040516103379190610d07565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906112f8565b6109ca565b604051610374919061110c565b60405180910390f35b34801561038957600080fd5b50610392610a11565b60405161039f9190610d07565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104b8929190611325565b60405180910390fd5b6104cb8282610a1d565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610529576040517fa10e43c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561053d5761053c610dbc565b5b600160149054906101000a900460ff16600181111561055f5761055e610dbc565b5b14610596576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60025481565b6000610668604051806020016040528060008152506108f4565b509050806106d75747600080549050600160149054906101000a900460ff16600181111561069957610698610dbc565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106ce9392919061134e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006002544261070691906113b4565b1115610885574260028190555060018060146101000a81548160ff0219169083600181111561073857610737610dbc565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610802959493929190611460565b602060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085491906114c8565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006060600080471415905060008060008054905014159050600080600181111561092257610921610dbc565b5b600160149054906101000a900460ff16600181111561094457610943610dbc565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261097891906113b4565b1190508380156109855750825b801561098e5750815b80156109975750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109df576109de6114f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610a3857610a376114f5565b5b6020026020010151610a4a9190611553565b90506000808281548110610a6157610a606114f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610af557610af4610dbc565b5b0217905550600067ffffffffffffffff811115610b1557610b14610ea4565b5b604051908082528060200260200182016040528015610b435781602001602082028036833780820191505090505b5060009080519060200190610b59929190610c47565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b80906115b5565b60006040518083038185875af1925050503d8060008114610bbd576040519150601f19603f3d011682016040523d82523d6000602084013e610bc2565b606091505b5050905080610bfd576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cc0579160200282015b82811115610cbf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c67565b5b509050610ccd9190610cd1565b5090565b5b80821115610cea576000816000905550600101610cd2565b5090565b6000819050919050565b610d0181610cee565b82525050565b6000602082019050610d1c6000830184610cf8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d67610d62610d5d84610d22565b610d42565b610d22565b9050919050565b6000610d7982610d4c565b9050919050565b6000610d8b82610d6e565b9050919050565b610d9b81610d80565b82525050565b6000602082019050610db66000830184610d92565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610dfc57610dfb610dbc565b5b50565b6000819050610e0d82610deb565b919050565b6000610e1d82610dff565b9050919050565b610e2d81610e12565b82525050565b6000602082019050610e486000830184610e24565b92915050565b6000604051905090565b600080fd5b600080fd5b610e6b81610cee565b8114610e7657600080fd5b50565b600081359050610e8881610e62565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610edc82610e93565b810181811067ffffffffffffffff82111715610efb57610efa610ea4565b5b80604052505050565b6000610f0e610e4e565b9050610f1a8282610ed3565b919050565b600067ffffffffffffffff821115610f3a57610f39610ea4565b5b602082029050602081019050919050565b600080fd5b6000610f63610f5e84610f1f565b610f04565b90508083825260208201905060208402830185811115610f8657610f85610f4b565b5b835b81811015610faf5780610f9b8882610e79565b845260208401935050602081019050610f88565b5050509392505050565b600082601f830112610fce57610fcd610e8e565b5b8135610fde848260208601610f50565b91505092915050565b60008060408385031215610ffe57610ffd610e58565b5b600061100c85828601610e79565b925050602083013567ffffffffffffffff81111561102d5761102c610e5d565b5b61103985828601610fb9565b9150509250929050565b600080fd5b60008083601f84011261105e5761105d610e8e565b5b8235905067ffffffffffffffff81111561107b5761107a611043565b5b60208301915083600182028301111561109757611096610f4b565b5b9250929050565b600080602083850312156110b5576110b4610e58565b5b600083013567ffffffffffffffff8111156110d3576110d2610e5d565b5b6110df85828601611048565b92509250509250929050565b60006110f682610d22565b9050919050565b611106816110eb565b82525050565b600060208201905061112160008301846110fd565b92915050565b600080fd5b600067ffffffffffffffff82111561114757611146610ea4565b5b61115082610e93565b9050602081019050919050565b82818337600083830152505050565b600061117f61117a8461112c565b610f04565b90508281526020810184848401111561119b5761119a611127565b5b6111a684828561115d565b509392505050565b600082601f8301126111c3576111c2610e8e565b5b81356111d384826020860161116c565b91505092915050565b6000602082840312156111f2576111f1610e58565b5b600082013567ffffffffffffffff8111156112105761120f610e5d565b5b61121c848285016111ae565b91505092915050565b60008115159050919050565b61123a81611225565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127a57808201518184015260208101905061125f565b83811115611289576000848401525b50505050565b600061129a82611240565b6112a4818561124b565b93506112b481856020860161125c565b6112bd81610e93565b840191505092915050565b60006040820190506112dd6000830185611231565b81810360208301526112ef818461128f565b90509392505050565b60006020828403121561130e5761130d610e58565b5b600061131c84828501610e79565b91505092915050565b600060408201905061133a60008301856110fd565b61134760208301846110fd565b9392505050565b60006060820190506113636000830186610cf8565b6113706020830185610cf8565b61137d6040830184610cf8565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113bf82610cee565b91506113ca83610cee565b9250828210156113dd576113dc611385565b5b828203905092915050565b6000819050919050565b6113fb816113e8565b82525050565b600067ffffffffffffffff82169050919050565b61141e81611401565b82525050565b600061ffff82169050919050565b61143b81611424565b82525050565b600063ffffffff82169050919050565b61145a81611441565b82525050565b600060a08201905061147560008301886113f2565b6114826020830187611415565b61148f6040830186611432565b61149c6060830185611451565b6114a96080830184611451565b9695505050505050565b6000815190506114c281610e62565b92915050565b6000602082840312156114de576114dd610e58565b5b60006114ec848285016114b3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061155e82610cee565b915061156983610cee565b92508261157957611578611524565b5b828206905092915050565b600081905092915050565b50565b600061159f600083611584565b91506115aa8261158f565b600082019050919050565b60006115c082611592565b915081905091905056fea26469706673582212200194bdf7f95d7b28691ebbe92c0d77c249ec2d697bfaa99326b42ebb5cccf8ad64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063473f1ddc1161008a5780636e04ff0d116100595780636e04ff0d146102d757806391ad27b414610315578063e55ae4e814610340578063fd6673f51461037d576100f3565b8063473f1ddc1461022b57806353a2c19a146102565780635f1b0fd8146102815780636919207d146102ac576100f3565b80632cfcc539116100c65780632cfcc539146101a2578063320229eb146101ac57806334854043146101d75780634585e33b14610202576100f3565b806309bc33a7146100f85780630cb4a29d14610123578063115cbaf51461014e5780631fe543e314610179575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d07565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610da1565b60405180910390f35b34801561015a57600080fd5b506101636103f8565b6040516101709190610e33565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190610fe7565b61040f565b005b6101aa6104cf565b005b3480156101b857600080fd5b506101c161063e565b6040516101ce9190610d07565b60405180910390f35b3480156101e357600080fd5b506101ec610648565b6040516101f99190610d07565b60405180910390f35b34801561020e57600080fd5b506102296004803603810190610224919061109e565b61064e565b005b34801561023757600080fd5b5061024061088a565b60405161024d919061110c565b60405180910390f35b34801561026257600080fd5b5061026b6108b4565b6040516102789190610d07565b60405180910390f35b34801561028d57600080fd5b506102966108c3565b6040516102a39190610d07565b60405180910390f35b3480156102b857600080fd5b506102c16108d0565b6040516102ce9190610d07565b60405180910390f35b3480156102e357600080fd5b506102fe60048036038101906102f991906111dc565b6108f4565b60405161030c9291906112c8565b60405180910390f35b34801561032157600080fd5b5061032a6109a2565b6040516103379190610d07565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906112f8565b6109ca565b604051610374919061110c565b60405180910390f35b34801561038957600080fd5b50610392610a11565b60405161039f9190610d07565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104b8929190611325565b60405180910390fd5b6104cb8282610a1d565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610529576040517fa10e43c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561053d5761053c610dbc565b5b600160149054906101000a900460ff16600181111561055f5761055e610dbc565b5b14610596576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60025481565b6000610668604051806020016040528060008152506108f4565b509050806106d75747600080549050600160149054906101000a900460ff16600181111561069957610698610dbc565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106ce9392919061134e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006002544261070691906113b4565b1115610885574260028190555060018060146101000a81548160ff0219169083600181111561073857610737610dbc565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610802959493929190611460565b602060405180830381600087803b15801561081c57600080fd5b505af1158015610830573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085491906114c8565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006060600080471415905060008060008054905014159050600080600181111561092257610921610dbc565b5b600160149054906101000a900460ff16600181111561094457610943610dbc565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261097891906113b4565b1190508380156109855750825b801561098e5750815b80156109975750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109df576109de6114f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610a3857610a376114f5565b5b6020026020010151610a4a9190611553565b90506000808281548110610a6157610a606114f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610af557610af4610dbc565b5b0217905550600067ffffffffffffffff811115610b1557610b14610ea4565b5b604051908082528060200260200182016040528015610b435781602001602082028036833780820191505090505b5060009080519060200190610b59929190610c47565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b80906115b5565b60006040518083038185875af1925050503d8060008114610bbd576040519150601f19603f3d011682016040523d82523d6000602084013e610bc2565b606091505b5050905080610bfd576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cc0579160200282015b82811115610cbf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c67565b5b509050610ccd9190610cd1565b5090565b5b80821115610cea576000816000905550600101610cd2565b5090565b6000819050919050565b610d0181610cee565b82525050565b6000602082019050610d1c6000830184610cf8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d67610d62610d5d84610d22565b610d42565b610d22565b9050919050565b6000610d7982610d4c565b9050919050565b6000610d8b82610d6e565b9050919050565b610d9b81610d80565b82525050565b6000602082019050610db66000830184610d92565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610dfc57610dfb610dbc565b5b50565b6000819050610e0d82610deb565b919050565b6000610e1d82610dff565b9050919050565b610e2d81610e12565b82525050565b6000602082019050610e486000830184610e24565b92915050565b6000604051905090565b600080fd5b600080fd5b610e6b81610cee565b8114610e7657600080fd5b50565b600081359050610e8881610e62565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610edc82610e93565b810181811067ffffffffffffffff82111715610efb57610efa610ea4565b5b80604052505050565b6000610f0e610e4e565b9050610f1a8282610ed3565b919050565b600067ffffffffffffffff821115610f3a57610f39610ea4565b5b602082029050602081019050919050565b600080fd5b6000610f63610f5e84610f1f565b610f04565b90508083825260208201905060208402830185811115610f8657610f85610f4b565b5b835b81811015610faf5780610f9b8882610e79565b845260208401935050602081019050610f88565b5050509392505050565b600082601f830112610fce57610fcd610e8e565b5b8135610fde848260208601610f50565b91505092915050565b60008060408385031215610ffe57610ffd610e58565b5b600061100c85828601610e79565b925050602083013567ffffffffffffffff81111561102d5761102c610e5d565b5b61103985828601610fb9565b9150509250929050565b600080fd5b60008083601f84011261105e5761105d610e8e565b5b8235905067ffffffffffffffff81111561107b5761107a611043565b5b60208301915083600182028301111561109757611096610f4b565b5b9250929050565b600080602083850312156110b5576110b4610e58565b5b600083013567ffffffffffffffff8111156110d3576110d2610e5d565b5b6110df85828601611048565b92509250509250929050565b60006110f682610d22565b9050919050565b611106816110eb565b82525050565b600060208201905061112160008301846110fd565b92915050565b600080fd5b600067ffffffffffffffff82111561114757611146610ea4565b5b61115082610e93565b9050602081019050919050565b82818337600083830152505050565b600061117f61117a8461112c565b610f04565b90508281526020810184848401111561119b5761119a611127565b5b6111a684828561115d565b509392505050565b600082601f8301126111c3576111c2610e8e565b5b81356111d384826020860161116c565b91505092915050565b6000602082840312156111f2576111f1610e58565b5b600082013567ffffffffffffffff8111156112105761120f610e5d565b5b61121c848285016111ae565b91505092915050565b60008115159050919050565b61123a81611225565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561127a57808201518184015260208101905061125f565b83811115611289576000848401525b50505050565b600061129a82611240565b6112a4818561124b565b93506112b481856020860161125c565b6112bd81610e93565b840191505092915050565b60006040820190506112dd6000830185611231565b81810360208301526112ef818461128f565b90509392505050565b60006020828403121561130e5761130d610e58565b5b600061131c84828501610e79565b91505092915050565b600060408201905061133a60008301856110fd565b61134760208301846110fd565b9392505050565b60006060820190506113636000830186610cf8565b6113706020830185610cf8565b61137d6040830184610cf8565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113bf82610cee565b91506113ca83610cee565b9250828210156113dd576113dc611385565b5b828203905092915050565b6000819050919050565b6113fb816113e8565b82525050565b600067ffffffffffffffff82169050919050565b61141e81611401565b82525050565b600061ffff82169050919050565b61143b81611424565b82525050565b600063ffffffff82169050919050565b61145a81611441565b82525050565b600060a08201905061147560008301886113f2565b6114826020830187611415565b61148f6040830186611432565b61149c6060830185611451565b6114a96080830184611451565b9695505050505050565b6000815190506114c281610e62565b92915050565b6000602082840312156114de576114dd610e58565b5b60006114ec848285016114b3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061155e82610cee565b915061156983610cee565b92508261157957611578611524565b5b828206905092915050565b600081905092915050565b50565b600061159f600083611584565b91506115aa8261158f565b600082019050919050565b60006115c082611592565b915081905091905056fea26469706673582212200194bdf7f95d7b28691ebbe92c0d77c249ec2d697bfaa99326b42ebb5cccf8ad64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "this is the function that the Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true The following should be true in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" state"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 235,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 252,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)230"
      },
      {
        "astId": 257,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)230": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}